// Generated by Supernova, do not modify
import UIKit
import SwiftUI
{[ const type = "Color" /]}
{[ let brand = ds.currentBrand() /]}
{[ const tokens = ds.tokensByType(type, brand.id) /]}

/// An extension on ``SwiftUI/Color`` that provides a static variable for each color token.
public extension Color {

    /// A convenience initializer for `Color` that takes a closure that returns a color based on the current `userInterfaceStyle`.
    ///
    /// - Parameters:
    ///   - lightModeColor: A closure that returns a `Color` for light mode.
    ///   - darkModeColor: A closure that returns a `Color` for dark mode.
    init(
        light lightModeColor: @escaping @autoclosure () -> Color,
        dark darkModeColor: @escaping @autoclosure () -> Color
    ) {
        self.init(uiColor: UIColor(
            light: UIColor(lightModeColor()),
            dark: UIColor(darkModeColor())
        ))
    }

    {[ for token in tokens ]}
    /// Token value for `{{ variableNameForToken(token) }}` on the currently activated ``PrismTokenSource/theme``.
    static var {{ variableNameForToken(token) }}: Color {
        return Color(UIColor.{{ variableNameForToken(token) }})
    }

    {[/]}
    /// An optional initializer for retrieving the associated ``SwiftUI/Color`` for a given token name.
    ///
    /// The initializer will resolve to a ``SwiftUI/Color`` representing the value for the token, or `nil` if the token name is not found.
    /// - Parameter tokenName: The name of the token to retrieve, following the format of all capital letters separated by underscore (e.g.: SCREAMING_SNAKE_CASE).
    init?(tokenName: String) {
        switch tokenName {
    {[ for token in tokens ]}
        case "{{ backendStringForToken(token) }}": self = .{{ variableNameForToken(token) }}
    {[/]}    
        default: return nil
        }
    }
}

/// An extension on `UIColor` that provides a static variable for each color token.
public extension UIColor {

    /// A convenience initializer for `UIColor` that takes a closure that returns a color based on the current `userInterfaceStyle`.
    ///
    /// - Parameters:
    ///   - lightModeColor: A closure that returns a `UIColor` for light mode.
    ///   - darkModeColor: A closure that returns a `UIColor` for dark mode.
    convenience init(
        light lightModeColor: @escaping @autoclosure () -> UIColor,
        dark darkModeColor: @escaping @autoclosure () -> UIColor
     ) {
        self.init { traitCollection in
            switch traitCollection.userInterfaceStyle {
            case .light:
                return lightModeColor()
            case .dark:
                return darkModeColor()
            default:
                return lightModeColor()
            }
        }
    }

    {[ for token in tokens ]}
    /// Token value for `{{ variableNameForToken(token) }}` on the currently activated ``PrismTokenSource/theme``.
    static var {{ variableNameForToken(token) }}: UIColor {
        return PrismTokenSource.shared.theme.colorTokenProvider.{{ variableNameForToken(token) }}
    }
    {[/]}
}

extension PrismColorTokenValuePair {
    {[ for token in tokens ]}
    static var {{ variableNameForToken(token) }}:PrismColorTokenValuePair {
        return PrismColorTokenValuePair(name: "{{ variableNameForToken(token) }}", value: PrismColorCatalogValue(tokenName: "{{ backendStringForToken(token) }}"))
    }
    {[/]}
}

extension PrismColorTokenValuePair: CaseIterable {
    /// Allows access to all the Prism color tokens as a ``PrismColorTokenValuePair`` array.
    ///
    /// This functionality is intended for use in the Prism Tokens Catalog UI and not for client development.
    public static var allCases: [PrismColorTokenValuePair] {
        return [
         {[ for token in tokens ]}
            .{{ variableNameForToken(token) }},
         {[/]}
        ]
    }
}
