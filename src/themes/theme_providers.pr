{*

Generate the theme implementations for each defined theme.

*}

{[ const supportedTypes = supportedTokenTypes() /]}
{[ let brand = ds.currentBrand() /]}
{[ const themes = ds.allThemes(brand.id) /]}
{[ const lightThemes = lightThemes(themes) /]}

{[ for theme in lightThemes ]}
    {[ const fileName = filePathForThemeProvider(theme) /]}
    {* Generate theme provider definition for each theme *}
    {[ emit file fileName ]}
// Generated by Supernova, do not modify
import SwiftUI
{{ packageImports(theme) }}
class {{ themeProviderName(theme.name) }}: PrismThemeProvider {

    {[ for type in supportedTypes ]}
    {{ providerSwiftForTokenType(type.tokenType, theme) }}
    {[/]}

    var name: String {
        "{{ theme.name }}"
    }

    func registerFonts() {
        Prism{{ theme.name }}Fonts.allCases.forEach {
            registerFont(bundle: .module, fontName: $0.rawValue, fontExtension: "otf")
        }
    }

    func registerFont(bundle: Bundle, fontName: String, fontExtension: String) {

        guard let fontURL = bundle.url(forResource: fontName, withExtension: fontExtension),
              let fontDataProvider = CGDataProvider(url: fontURL as CFURL),
              let font = CGFont(fontDataProvider) else {
                  fatalError("Couldn't create font from data")
        }

        var error: Unmanaged<CFError>?

        CTFontManagerRegisterGraphicsFont(font, &error)
    }

    func unregisterFonts() {
        Prism{{ theme.name }}Fonts.allCases.forEach {
            unregisterFont(bundle: .module, fontName: $0.rawValue, fontExtension: "otf")
        }
    }

    func unregisterFont(bundle: Bundle, fontName: String, fontExtension: String) {

        guard let fontURL = bundle.url(forResource: fontName, withExtension: fontExtension),
              let fontDataProvider = CGDataProvider(url: fontURL as CFURL),
              let font = CGFont(fontDataProvider) else {
                  fatalError("Couldn't create font from data")
        }

        var error: Unmanaged<CFError>?

        CTFontManagerUnregisterGraphicsFont(font, &error)
    }
}

    {[/]}
{[/]}

{[ for type in supportedTypes ]}
    {[ const tokens = ds.tokensByType(type.supernovaType, brand.id) /]}
    {[ const mergedThemes = mergeDarkValues(tokens, themes) /]}
    {[ for theme in mergedThemes ]}
        {[ const themeTokens = getThemeTokens(theme) /]}
        {[ const filteredTokens = filterTokenPathForType(type.tokenType, themeTokens) /]}
        {[ const fileName = filePathForTokenProvider(theme, type.tokenType, true) /]}
        {[ emit file fileName ]}
// Generated by Supernova, do not modify
import SwiftUI
import UIKit
{{ packageImports(theme) }}
{{ providerClassDefinitionForTokenType(type.tokenType, theme, true) }} {
        {[ for token in filteredTokens ]}
    {{ swiftVariableForToken(token, theme) }}
        {[/]}
}
        {[/]}
    {[/]}
{[/]}

{* 

Generate empty definitions for the theme providers for Default, 
this will make Default fall back to use the standard extensions 

*}
{[ for type in supportedTypes ]}
    {[ const defaultTheme = defaultTheme() /]}
    {[ const fileName = filePathForTokenProvider(defaultTheme, type.tokenType) /]}
    {[ emit file fileName ]}
// Generated by Supernova, do not modify
import UIKit

{{ providerClassDefinitionForTokenType(type.tokenType, defaultTheme) }} {
}
    {[/]}
{[/]}
